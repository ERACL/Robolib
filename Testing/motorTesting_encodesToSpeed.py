import numpy as np
import matplotlib.pyplot as plt

encodes = [9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9411, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9425, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9449, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9483, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9522, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9577, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9626, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9679, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9732, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9787, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9855, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 9971, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10029, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10085, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10143, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10277, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10393, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10459, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10535, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10593, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10651, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10709, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10768, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10826, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10899, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 10957, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11019, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11077, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11135, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11209, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11329, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11387, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11445, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11504, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11577, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11635, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11693, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11751, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11810, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11886, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 11945, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12003, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12061, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12127, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12185, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12258, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12317, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12375, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12437, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12495, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12568, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12626, 12688, 12688, 12688, 12688, 12688, 12688, 12688, 12688, 12688, 12688, 12688, 12688, 12688, 12688]

i = 0
N = len(encodes)
speeds = [0]*N

while i < N:
    k = i
    while k < N and encodes[i] == encodes[k]:
        k += 1

    if k == N:
        speeds[i:] = [speeds[i-1]] * (k-i+1)
    else:
        speed = (encodes[k] - encodes[i]) / (k-i+1)
        speeds[i:k] = [speed] * (k-i+1)
    i = k

speeds_raw = speeds[:]

middlePoints = [0]
i = 0
while i < N:
    k = i
    while k < N and speeds[k] == speeds[i]:
        k += 1
    middlePoints.append(int((k+i) / 2))
    i = k
middlePoints.append(N-1)

currentMiddlePoint = 0
for i in range(1, N):
    if i > middlePoints[currentMiddlePoint]:
        currentMiddlePoint += 1
    speeds[i] = speeds[middlePoints[currentMiddlePoint-1]] * (middlePoints[currentMiddlePoint] - i) / (middlePoints[currentMiddlePoint] - middlePoints[currentMiddlePoint-1]) + speeds[middlePoints[currentMiddlePoint]] * (i - middlePoints[currentMiddlePoint-1]) / (middlePoints[currentMiddlePoint] - middlePoints[currentMiddlePoint-1])

speeds_nofilter = speeds[:]

for j in range(50):
    i = 3
    while i < N - 3:
        speeds[i] = (speeds[i-3] + speeds[i-2] + speeds[i-1] + speeds[i] + speeds[i+1] + speeds[i+2] + speeds[i+3]) / 7
        i += 1

plt.plot(np.linspace(0, len(speeds) *  0.001, len(speeds)), speeds)
#plt.plot(np.linspace(0, len(speeds) *  0.001, len(speeds)), speeds_nofilter)
plt.plot(np.linspace(0, len(speeds) *  0.001, len(speeds)), speeds_raw)
plt.show()
